                                  Tux Racer
                                   
                                Version 0.11

                   Copyright (C) 1999-2000 Jasmin F. Patry
                          <jfpatry@cgl.uwaterloo.ca>

Contents
--------

   * Introduction
   * Requirements
   * Getting Tux Racer
   * Installation
   * Notes for Voodoo Owners
   * Playing Tux Racer
   * Configuring Tux Racer
   * Creating New Courses
   * Mailing Lists
   * Reporting Bugs and Submitting Patches
   * No Warranty


Introduction
------------

Tux Racer is a simple OpenGL-based racing game featuring Tux, the Linux
Penguin.  I wrote it as a final project for a graphics course I took in
1999.  While I've made a few enhancements since then, the basic game
hasn't changed much, which is to say it still needs a lot of work. :-)

The game is currently incomplete, but is still playable.  Things
that would be nice to add in the future include:

   * More courses, bigger courses
   * Sound support
   * Joystick support
   * Better textures, backgrounds and sky
   * Better menus, score displays
   * More realistic physical model
   * Rendering optimizations
   * More characters
   * Head-to-head/network play
   * Power-ups, damage system
   * Ability to do flips, tricks, etc., with a point system
   * More flexible course description (tunnels, bridges, different
     types of trees, etc.)
   * Level editor
   * Plus lots that I've forgotten, I'm sure...


Requirements
------------

Tux Racer requires the following components in order to build and run:

   * The Tux Racer data files.  This should be available from the same
     place that you got the Tux Racer source from.

   * A UN*X-like system (I've compiled previous incarnations of Tux
     Racer under Irix, Solaris, and -- of course -- Linux).

   * X11 libraries and include files.
   
   * An implementation of the OpenGL API version 1.1 or greater (Mesa 3.0
     and 3.1 will both work; see http://www.mesa3d.org).

   * The GLUT library, version 3.7 beta or greater.  This is
     distributed in the MesaDemos package, so if you have installed
     Mesa you probably also have GLUT.  Otherwise, see
     http://www.opengl.org. 

   * Tcl Version 8.0 or greater.

   * A (reasonably recent, fast, and supported) accelerated 3D video
     card.  Tux Racer is not playable on most current systems without 3D
     acceleration.

   * GNU make (gmake).

My development platform for Tux Racer is a Linux 2.2 system (RedHat
6.0) running on an Intel Celeron 366@525MHz, with a Voodoo3 2000 video
card, XFree86 3.9.16, and Mesa 3.1.  I can make no guarantees about
other configurations.  However, patches that allow Tux Racer to
compile and run on other platforms are much appreciated!


Getting Tux Racer
-----------------

The latest version of Tux Racer can be obtained from:
    http://tuxracer.sourceforge.net/


Installation
------------

0) Install the tuxracer-data package (any location will do --
   /usr/local/share/tuxracer is the default path used by the tuxracer
   program)

1) ./configure 

2) make 

3) make install (as root)

That should do it for most people.  If that doesn't work, try
./configure --help for a list of options.  If that still doesn't work,
please fix it and send me a patch. ;-)

Once you've got the tuxracer executable compiled, try running it.  This
will fail if you've installed the data files someplace other than the
default location.  To fix this, edit ~/.tuxracer (which has just been
created) to set the data_dir variable to the directory where you
installed the Tux Racer data files.  Then try running tuxracer again.


Configuring Tux Racer
---------------------

There are a number of options the control Tux Racer's execution.  You
can change these by editing the file ~/.tuxracer.  Hopefully most of
these are self-explanatory.  Here's a quick rundown:

    * data_dir: The location of the Tux Racer data files

    * fullscreen: Set this to 1 to force the window to be the same
      size as your screen (for developers: this activates "GameGLUT"
      mode).  Voodoo users: This is NOT what you want to use to
      activate fullscreen rendering on your card.  See ``Notes for
      Voodoo{1,2} Owners'' below.

    * x_resolution, y_resolution: these specify the size of the window.

    * force_window_position: If true, then the Tux Racer window will
      automatically be placed at (0,0).

    * warp_pointer: If true, then the mouse pointer will be moved to
      the middle of the window at every frame.  This is very handy if
      you're using a fullscreen-only card (like a Voodoo)

    * control_mode: unused.

    * *_key: These settings allow you to change the default
      keybindings.  Alphabetic keys are case-insensitive.  The
      following "special" keys are recognized: f1-f12, left, up,
      right, down, page_up, page_down, home, end, insert, tab, space,
      backspace, enter, delete, escape.  You can bind multiple keys to
      an action by listing all of the keys, separated by a space
      (e.g., set quit_key "q escape" binds Q and Esc to the quit
      action).

    * display_fps: Set this to true to display the current framerate
      in Hz.

    * draw_tux_shadow: Set this to true to display Tux's shadow.  Note
      that this is a hack and is quite expensive in terms of
      framerate.  It looks better if your card has a stencil buffer
      (use the --enable-stencil-buffer configure option to enable the
      use of the stencil buffer).

    * tux_sphere_divisions: Higher values result in a more finely
      subdivided mesh for Tux, and vice versa.  If you're experiencing
      low framerates, try lowering this value.

    * tux_shadow_sphere_divisions: The level of subdivision of Tux's
      shadow.

    * draw_particles: If true, then particles will be drawn to model
      the snow that is kicked up as Tux moves.  Setting this to false
      should help improve performance.

    * draw_particle_shadows: If true, then each particle will cast a
      shadow.  

    * nice_fog: If true, then the GL_NICEST hint will be used when
      rendering fog.  On some cards, setting this to false may improve
      performance.

    * compile_course: This compiles the entire course mesh into a big
      display list.  If you're using indirect rendering, setting this
      to true might improve performance.

    * use_sphere_display_list: Mesa 3.1 sometimes renders Tux
      strangely when display lists are used.  Setting this to false
      should solve the problem at the cost of a few Hz.

    * do_intro_animation: If false, then the introductory animation
      sequence will be skipped.

    * mipmap_type: Allows you to control which type of texture
      interpolation/mipmapping is used when rendering textures.  The
      values correspond to the following OpenGL settings:

          0: GL_NEAREST
          1: GL_LINEAR
          2: GL_NEAREST_MIPMAP_NEAREST
          3: GL_LINEAR_MIPMAP_NEAREST
          4: GL_NEAREST_MIPMAP_LINEAR
          5: GL_LINEAR_MIPMAP_LINEAR

      On some cards, you may be able to improve performance by
      decreasing this number, at the cost of lower image quality.

    * ode_solver: Selects the ODE (ordinary differential equation)
      solver.  Possible values are:

          0: Modified Euler     (fastest but least accurate)
          1: Runge-Kutta (2,3)
          2: Runge-Kutta (4,5)  (slowest but most accurate)

    * fov: field-of-view in degrees.

    * debug: This is parsed as a space-delimited string of keywords,
      each of which may be preceeded with a `-'.  Currently, the 
      recognized keywords are: 

          all: activates all debugging messages
	  ode: activates ODE debugging messages

      Preceeding a keyword with `-' will suppress those types of
      debugging messages.

    * warning_level: Valid values are between 0 and 100; 0 suppresses
      all warnings, while 100 displays all warnings.  It is
      recommended that you leave this value at 100.

Note that this file is re-written every time Tux Racer quits, so don't
bother inserting comments or the like.  This file is parsed as a Tcl
script, so Tcl syntax applies.


Notes for Voodoo Owners
-----------------------

Assuming your Voodoo card is set up properly, Tux Racer should run
properly on fullscreen-only Voodoo cards "out of the tarball".  There
are some settings in the .tuxracer file that apply particularly to
Voodoo owners, but these should have the proper default values:
 
    * fullscreen: Do NOT set this to true.  This will make the Tux
      Racer window the same size as your X desktop, which is probably
      not what you want if you have a Voodoo card that can only render
      at 640x480.

    * force_window_position: This should be set to true.  This is
      particularly useful if you usually have to manually position
      windows with the mouse -- the window will automatically be
      positioned at (0,0) if this is set to true.

    * warp_pointer: This should be set to true.  This will prevent the
      Tux Racer window from losing the focus in X -- which can be a
      real pain to recover from.

Note that I don't do fullscreen rendering with my Voodoo3 anymore, so
I can't test this -- therefore, please report any inaccuracies or
ommisions.


Playing Tux Racer
-----------------

The (current) object of the game is to get to the bottom of the course
as quickly as possible; the elapsed time is displayed in the bottom left
hand corner of the screen. 

You can steer Tux and make him ``hit the brakes'' to slow him
down. When steering, you will notice that his left or right arm moves
down to drag on the surface; when braking, both his arms will move down.
By default, the `J' key turns Tux left, and the `L' key turns Tux right.
Hold down the space bar to make him hit the brakes.

The viewpoint can be changed using the following keys:
    
   1: Places the viewpoint behind and above Tux.  This is the default.
   2: Places the viewpoint behind Tux.
   3: Places the viewpoint at Tux's head.

If you get stuck on the course and can't make any forward progress,
`Q' will quit the game.  You can press this key at any time to stop
the race.

After the game ends, you will see a ``Game Over'' screen; hit any key
to return to the start screen.


Creating New Courses
--------------------

Anybody can creating new courses.  For an example, have a look at
<tuxracer-data>/courses/1/course.tcl, which is fairly well-commented.
Here are a few pointers:

    * The course elevation data is specified as a heightfield using a
      greyscale bitmap.  White is high, black is low.

    * The terrain type is specified using another greyscale bitmap.
      White corresponds to snow, 50% grey corresponds to rock, and
      black corresponds to ice.  You don't have to be exact here; the
      closest match is used.  NOTE: this bitmap must have the same
      dimensions as the elevation bitmap.

    * Trees are specified using (yet another) bitmap.  This bitmap can
      have arbitrary size.  Black pixels correspond to "no tree",
      while "non-black" pixels correspond to trees.  "Non-black"
      actually means any pixel with total intensity (measured as the
      sum of the (R,G,B) values of the pixel, each measured on a scale
      of 0-255) greater than 128.

    * Textures must have dimensions that are a power of 2, and should
      be limited to 256 pixels in each dimension.

    * All bitmaps are in the SGI RGB format (which can be read and
      created by The GIMP), and can be compressed or uncompressed.
      
Please develop new courses!  You don't need any special tools to do so
(The GIMP is all that's needed), and you'll get fame and fortune for
doing so (ok, maybe not, but you'll have my eternal gratitude :-).
If you do develop a new course, please announce it on the
tuxracer-main mailing list (see below), and we'll incorporate it into
the next Tux Racer release.


Mailing Lists
-------------

There are three mailing lists for Tux Racer: 

    * tuxracer-main: This list is for Tux Racer users. If you have a
      question about Tux Racer that's not related to Tux Racer
      development, this is the place for it.

    * tuxracer-devel: This list is for people who wish to contribute
      to Tux Racer development.

    * tuxracer-announce: This is a very low-volume list where I'll
      announce new versions of Tux Racer.

You can subscribe, unsubscribe, change your options, or view the list
archives from this page: https://sourceforge.net/mail/?group_id=2944 .


Reporting Bugs and Submitting Patches
-------------------------------------

If you have a question or wish to report a bug, please email the
tuxracer-main mailing list <tuxracer-main@lists.sourceforge.net>.  

If you wish to submit a patch, please email the tuxracer-devel mailing
list <tuxracer-devel@lists.sourceforge.net>.  


No Warranty
-----------

Tux Racer comes with ABSOLUTELY NO WARRANTY.  See the COPYING file for
details.

